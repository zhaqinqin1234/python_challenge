{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "#import module\n",
    "import csv, os"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "#define file path to load and output\n",
    "election_csv = os.path.join(\"Resources\", \"election_data.csv\")\n",
    "file_output = os.path.join(\"analysis\", \"election_analysis.txt\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "#make list to hold data\n",
    "VoterID = []\n",
    "county = []\n",
    "candidate = []\n",
    "cand_option = {}\n",
    "total_cand_vote = 0\n",
    "# Winning Candidate and Winning Count Tracker\n",
    "winning_candidate = \"\"\n",
    "winning_count = 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "#read csv and convert it into list\n",
    "with open(election_csv, 'r') as f:\n",
    "    csvreader = csv.reader(f, delimiter =\",\")\n",
    "    header =next(csvreader)\n",
    "    #print(header)\n",
    "    for row in csvreader:\n",
    "        VoterID.append(row[0])\n",
    "        county.append(row[1])\n",
    "        candidate_name = row[2]\n",
    "        if candidate_name not in candidate:\n",
    "            candidate.append(candidate_name)\n",
    "            cand_option[candidate_name]=0\n",
    "        cand_option[candidate_name]=cand_option[candidate_name] + 1\n",
    "            "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "    #get total votes\n",
    "    total_votes = len(VoterID)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "\n",
      "Elction Result\n",
      "------------------------\n",
      "Total Votes: 3521001\n",
      "------------------------\n",
      "Khan: 63.000% (2218231)\n",
      "Correy: 20.000% (704200)\n",
      "Li: 14.000% (492940)\n",
      "O'Tooley: 3.000% (105630)\n",
      "-------------------------\n",
      "Winner: Khan\n",
      "-------------------------\n",
      "\n"
     ]
    }
   ],
   "source": [
    "    with open(file_output, \"w\") as txt_file:\n",
    "        result = (\n",
    "             f\"\\n\\nElction Result\\n\"\n",
    "             f\"------------------------\\n\"\n",
    "             f\"Total Votes: {total_votes}\\n\"\n",
    "             f\"------------------------\\n\")\n",
    "        print(result, end=\"\")\n",
    "        txt_file.write(result)\n",
    "        #get candidate count dictionary\n",
    "        for candidate in cand_option:\n",
    "\n",
    "            # Retrieve vote count and percentage\n",
    "            votes = cand_option.get(candidate)\n",
    "            vote_percentage = float(votes) / float(total_votes) * 100\n",
    "\n",
    "            # Determine winning vote count and candidate\n",
    "            if (votes > winning_count):\n",
    "                winning_count = votes\n",
    "                winning_candidate = candidate\n",
    "\n",
    "            # Print each candidate's voter count and percentage (to terminal)\n",
    "            voter_output = f\"{candidate}: {vote_percentage:.3f}% ({votes})\\n\"\n",
    "            print(voter_output, end=\"\")\n",
    "\n",
    "            # Save each candidate's voter count and percentage to text file\n",
    "            txt_file.write(voter_output)\n",
    "\n",
    "        # Print the winning candidate (to terminal)\n",
    "        winning_cand_summary = (\n",
    "            f\"-------------------------\\n\"\n",
    "            f\"Winner: {winning_candidate}\\n\"\n",
    "            f\"-------------------------\\n\")\n",
    "        print(winning_cand_summary)\n",
    "\n",
    "        # Save the winning candidate's name to the text file\n",
    "        txt_file.write(winning_candidate_summary)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
